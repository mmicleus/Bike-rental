{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\nimport { environment as env } from 'src/environments/environment.development';\nimport { User } from './auth/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n      this.account = null;\n    }\n    logIn(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${env.API_KEY}`, {\n        email,\n        password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(this.handleResponse.bind(this)));\n    }\n    signUp(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${env.API_KEY}`, {\n        email,\n        password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(this.handleResponse.bind(this)));\n    }\n    handleError(httpError) {\n      let aux = httpError.error.error.message;\n      let message;\n      switch (aux) {\n        case \"EMAIL_EXISTS\":\n          message = \"Email taken!\";\n          break;\n        case \"EMAIL_NOT_FOUND\":\n          message = \"Email not found!\";\n          break;\n        case \"INVALID_PASSWORD\":\n          message = \"Invalid Password!\";\n          break;\n        case \"USER_DISABLED\":\n          message = \"User Disabled\";\n          break;\n        default:\n          message = \"Unknown password!\";\n      }\n      return throwError(message);\n    }\n    handleResponse(response) {\n      let user = new User(response.email, response.localId, response.idToken, this.getExpirationDate(response.expiresIn));\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      this.user.next(user);\n      this.account = user;\n      this.router.navigate([\"/ballinastoe\"]);\n      this.autoLogout(+response.expiresIn * 1000);\n    }\n    getExpirationDate(expiresIn) {\n      return new Date(new Date().getTime() + +expiresIn * 1000);\n    }\n    autoLogin() {\n      console.log(\"autoLogin\");\n      let aux = localStorage.getItem(\"user\");\n      if (!aux) return;\n      let user = JSON.parse(aux);\n      let actualUser = new User(user.email, user.id, user._token, new Date(user._tokenExpirationDate));\n      console.log(\"user1:\");\n      console.log(user);\n      if (!actualUser.token) {\n        return;\n      }\n      this.user.next(actualUser);\n      this.account = actualUser;\n      let expiresIn = new Date(user._tokenExpirationDate).getTime() - new Date().getTime();\n      console.log(\"expires in:\" + expiresIn);\n      this.autoLogout(expiresIn);\n      console.log(\"actual user:\");\n      console.log(actualUser);\n    }\n    logOut() {\n      localStorage.removeItem(\"user\");\n      this.user.next(null);\n      this.account = null;\n      if (this.expirationId) {\n        clearTimeout(this.expirationId);\n      }\n      this.expirationId = null;\n      this.router.navigate([\"/auth\"]);\n    }\n    autoLogout(expiresIn) {\n      this.expirationId = setTimeout(() => {\n        this.logOut();\n      }, expiresIn);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}